#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Magic", "AudioGeometryMaterial", "CustomMaterialCube", "AudioColorMaterial", "Clouds"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    float3 xformOp:translate = (0, 1.1, -0.5)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Clouds"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                int64 burstCount = 20
                float3 emissionDirection = (0, 1, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Sphere"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isEmitting = 1
                bool isLocal = 0
                bool isSpawningEnabled = 0
                bool loops = 1
                float particleSpeed = 0.5
                float particleSpeedVariation = 0.1
                float3 shapeSize = (0.05, 0.05, 0.05)
                bool spawnInheritParentColor = 0
                token spawnOccasion = "OnUpdate"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 1
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, -0.05, 0)
                    token animationRepeatMode = "PlayOnce"
                    token billboardMode = "Billboard"
                    float birthRate = 1000
                    float birthRateVariation = 0
                    token blendMode = "Alpha"
                    float colorEvolutionPower = 1
                    int64 columnCount = 4
                    float dampingFactor = 8
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 0
                    float frameRateVariation = 0
                    int64 initialFrame = 2
                    int64 initialFrameVariation = 6
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "EaseFadeOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 1
                    asset particleImage = @VinylVizPresetTextures/dustsheet.exr@
                    double particleLifeSpan = 2
                    double particleLifeSpanVariation = 1
                    float particleMass = 1
                    float particleMassVariation = 0.8
                    float particleSize = 0.01
                    float particleSizeVariation = 0
                    float3 radialGravityCenter = (0, -0.1, 0)
                    float radialGravityStrength = -0.1
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 8
                    float sizeMultiplierAtEndOfLifespanPower = 0.2
                    token sortOrder = "DecreasingDepth"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 1, 1, 0.26)
                    float4 startColorB = (1, 1, 1, 0.07)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                }
            }
        }
    }

    def Xform "Magic"
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                float3 emissionDirection = (0, 0, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Sphere"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isEmitting = 0
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 0.06
                float particleSpeedVariation = 0.04
                float radialAmount = 6.283
                float3 shapeSize = (0.05, 0.05, 0.05)
                bool spawnInheritParentColor = 1
                token spawnOccasion = "OnUpdate"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 1
                double warmupDuration = 1.5

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, 0, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 40
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 4
                    float dampingFactor = 0.25
                    float4 endColorA = (1, 0.051991113, 1, 1)
                    float4 endColorB = (0, 0.98059916, 1, 1)
                    float frameRate = 30
                    float frameRateVariation = 0
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 2
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 1
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0.5
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0.5
                    asset particleImage = @VinylVizPresetTextures/twinkle.exr@
                    double particleLifeSpan = 1
                    double particleLifeSpanVariation = 0.2
                    float particleMass = 1
                    float particleMassVariation = 0.2
                    float particleSize = 0.05
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (1, 1, 0)
                    float radialGravityStrength = 0
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 0.35
                    float sizeMultiplierAtEndOfLifespanPower = 3
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 0.051991113, 1, 1)
                    float4 startColorB = (0.9986965, 0.9674097, 0, 1)
                    float stretchFactor = 0
                    bool useEndColor = 1
                    bool useEndColorRange = 1
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -0.04, 0)
                    token animationRepeatMode = "AutoReverse"
                    token billboardMode = "Billboard"
                    float birthRate = 25
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 0
                    int64 columnCount = 4
                    float dampingFactor = 3
                    float4 endColorA = (0, 0.98059916, 1, 1)
                    float4 endColorB = (1, 0.051991113, 1, 1)
                    float frameRate = 24
                    float frameRateVariation = 0
                    int64 initialFrame = 2
                    int64 initialFrameVariation = 4
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0.25
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0.745
                    float particleAngleVariation = 0.25
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @VinylVizPresetTextures/twinkle.exr@
                    double particleLifeSpan = 0.75
                    double particleLifeSpanVariation = 0.25
                    float particleMass = 1
                    float particleMassVariation = 2
                    float particleSize = 0.02
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (0, 0, 0)
                    float radialGravityStrength = 0
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 0
                    float sizeMultiplierAtEndOfLifespanPower = 1
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 0.051991113, 1, 0.04)
                    float4 startColorB = (0, 0.98059916, 1, 0.04)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 1
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0, 0, 0)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def Material "AudioGeometryMaterial"
    {
        float inputs:audioLevel = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1229.4531, -160.72266)
                    float2 sizeInSubgraph = (134.5, 53)
                    int stackingOrderInSubgraph = 555
                }
            }
        )
        float inputs:diminish = 0.5 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1227.1016, -87.91406)
                    float2 sizeInSubgraph = (120.5, 53)
                    int stackingOrderInSubgraph = 460
                }
            }
        )
        float inputs:lacunarity = 2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1230.1562, -234.69531)
                    float2 sizeInSubgraph = (129.5, 53)
                    int stackingOrderInSubgraph = 225
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/AudioGeometryMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/AudioGeometryMaterial/GeometryModifier.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/AudioGeometryMaterial/Overlay.outputs:out>
            color3f inputs:emissiveColor = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:ior
            float inputs:metallic = 0
            float3 inputs:normal = (0, 0, 1)
            float inputs:opacity = 1
            float inputs:opacity.connect = None
            float inputs:opacityThreshold
            float inputs:roughness = 0.5
            token outputs:out
            float2 ui:nodegraph:node:pos = (24.421875, -97.78516)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 559
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:emissiveColor", "inputs:opacity", "inputs:normal"]
        }

        def NodeGraph "tan_color"
        {
            color3f outputs:output_color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 556
                    }
                }
            )
            color3f outputs:output_color.connect = </Root/AudioGeometryMaterial/tan_color/Constant_1.outputs:out>
            float2 ui:nodegraph:node:pos = (-808.7492, -213.62032)
            float2 ui:nodegraph:node:size = (111, 81)
            int ui:nodegraph:node:stackingOrder = 510
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1005.3789, 67.59375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205.99783, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 558

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/tan_color/Tan.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh = 0.9
                float inputs:outlow = 0.2
                float outputs:out
                float2 ui:nodegraph:node:pos = (405.5, 90.5)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 556
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh"]
            }

            def Shader "Tan"
            {
                uniform token info:id = "ND_tan_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/tan_color/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (240.5, 90.5)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (61.25, 90.5)
                float2 ui:nodegraph:node:size = (122.5, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Fractal3D"
            {
                uniform token info:id = "ND_fractal3d_color3"
                float3 inputs:amplitude
                float inputs:diminish.connect = </Root/AudioGeometryMaterial/tan_color/Remap.outputs:out>
                float inputs:lacunarity = 2
                float3 inputs:position
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (577.75, 90.5)
                float2 ui:nodegraph:node:size = (130.5, 181)
                int ui:nodegraph:node:stackingOrder = 556
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:position", "inputs:lacunarity"]
            }

            def Shader "Constant_1"
            {
                uniform token info:id = "ND_constant_color3"
                color3f inputs:value = (0, 0, 0)
                color3f inputs:value.connect = </Root/AudioGeometryMaterial/tan_color/Fractal3D.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (780.5, 90.5)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }
        }

        def NodeGraph "sin_color"
        {
            color3f outputs:output_color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 556
                    }
                }
            )
            color3f outputs:output_color.connect = </Root/AudioGeometryMaterial/sin_color/Constant_1.outputs:out>
            float2 ui:nodegraph:node:pos = (-814.4289, -75.526566)
            float2 ui:nodegraph:node:size = (109, 81)
            int ui:nodegraph:node:stackingOrder = 561
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:output_color"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1005.3789, 67.59375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205.5, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 558

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/sin_color/Sin.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh = 0.9
                float inputs:outlow = 0.2
                float outputs:out
                float2 ui:nodegraph:node:pos = (405.5, 90.5)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 558
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh"]
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (61.25, 90.5)
                float2 ui:nodegraph:node:size = (122.5, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Fractal3D"
            {
                uniform token info:id = "ND_fractal3d_color3"
                float3 inputs:amplitude
                float inputs:diminish.connect = </Root/AudioGeometryMaterial/sin_color/Remap.outputs:out>
                float inputs:lacunarity = 2
                float3 inputs:position
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (577.75, 90.5)
                float2 ui:nodegraph:node:size = (130.5, 181)
                int ui:nodegraph:node:stackingOrder = 556
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:position", "inputs:lacunarity"]
            }

            def Shader "Constant_1"
            {
                uniform token info:id = "ND_constant_color3"
                color3f inputs:value = (0, 0, 0)
                color3f inputs:value.connect = </Root/AudioGeometryMaterial/sin_color/Fractal3D.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (780.5, 90.5)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Sin"
            {
                uniform token info:id = "ND_sin_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/sin_color/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (245.6289, 91.14453)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 557
            }
        }

        def Shader "Plus"
        {
            uniform token info:id = "ND_plus_color3"
            color3f inputs:bg.connect = </Root/AudioGeometryMaterial/sin_color.outputs:output_color>
            color3f inputs:fg.connect = </Root/AudioGeometryMaterial/cos_color.outputs:output_color>
            float inputs:mix = 0.5
            float inputs:mix.connect = None
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-579.14453, 121.34375)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 557
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
        }

        def NodeGraph "cos_color"
        {
            color3f outputs:output_color (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 556
                    }
                }
            )
            color3f outputs:output_color.connect = </Root/AudioGeometryMaterial/cos_color/Constant_1.outputs:out>
            float2 ui:nodegraph:node:pos = (-650.9992, -268.7492)
            float2 ui:nodegraph:node:size = (113, 81)
            int ui:nodegraph:node:stackingOrder = 560
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1005.3789, 67.59375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205.5, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 558

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/cos_color/Cos.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh = 0.9
                float inputs:outlow = 0.2
                float outputs:out
                float2 ui:nodegraph:node:pos = (405.5, 90.5)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 556
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh"]
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (61.25, 90.5)
                float2 ui:nodegraph:node:size = (122.5, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Fractal3D"
            {
                uniform token info:id = "ND_fractal3d_color3"
                float3 inputs:amplitude
                float inputs:diminish.connect = </Root/AudioGeometryMaterial/cos_color/Remap.outputs:out>
                float inputs:lacunarity = 2
                float3 inputs:position
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (577.75, 90.5)
                float2 ui:nodegraph:node:size = (130.5, 181)
                int ui:nodegraph:node:stackingOrder = 556
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:position", "inputs:lacunarity"]
            }

            def Shader "Constant_1"
            {
                uniform token info:id = "ND_constant_color3"
                color3f inputs:value = (0, 0, 0)
                color3f inputs:value.connect = </Root/AudioGeometryMaterial/cos_color/Fractal3D.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (780.5, 90.5)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 556
            }

            def Shader "Cos"
            {
                uniform token info:id = "ND_cos_float"
                float inputs:in.connect = </Root/AudioGeometryMaterial/cos_color/Time.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (231.91797, 89.35547)
                float2 ui:nodegraph:node:size = (116, 40)
                int ui:nodegraph:node:stackingOrder = 557
            }
        }

        def Shader "Overlay"
        {
            uniform token info:id = "ND_overlay_color3"
            color3f inputs:bg.connect = </Root/AudioGeometryMaterial/cos_color.outputs:output_color>
            color3f inputs:fg.connect = </Root/AudioGeometryMaterial/Plus.outputs:out>
            float inputs:mix = 0.5
            float inputs:mix.connect = None
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-428.92578, -117.39844)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 553
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }
    }

    def Material "AudioColorMaterial"
    {
        float inputs:audioLevel = 0.2 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-930.90265, -1326.1144)
                    float2 sizeInSubgraph = (134.5, 53)
                    int stackingOrderInSubgraph = 1391
                }
            }
        )
        float inputs:speed = 0.15 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1344.5938, -972.4336)
                    float2 sizeInSubgraph = (106.5, 53)
                    int stackingOrderInSubgraph = 1436
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/AudioColorMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/AudioColorMaterial/GeometryModifier.outputs:out>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (474.70703, -619.33984)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1138

        def Shader "GeometryModifier"
        {
            uniform token info:id = "ND_realitykit_geometrymodifier_vertexshader"
            float3 inputs:bitangent.connect = None
            color4f inputs:color
            float3 inputs:modelPositionOffset.connect = </Root/AudioColorMaterial/Range.outputs:out>
            float3 inputs:normal.connect = None
            float4 inputs:userAttribute
            half4 inputs:userAttributeHalf4_0
            half4 inputs:userAttributeHalf4_1
            float2 inputs:uv0.connect = None
            float2 inputs:uv1.connect = None
            token outputs:out
            float2 ui:nodegraph:node:pos = (240.71875, -366.98438)
            float2 ui:nodegraph:node:size = (196.5, 325)
            int ui:nodegraph:node:stackingOrder = 1435
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uv0", "inputs:modelPositionOffset", "inputs:normal", "inputs:normal", "inputs:bitangent"]
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/AudioColorMaterial/HSVToRGB.outputs:out>
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal.connect = </Root/AudioColorMaterial/Range.outputs:out>
            float inputs:occlusion
            float inputs:opacity
            float inputs:opacityThreshold
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (282.05426, -778.5438)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 1304
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced", "inputs:metallic", "inputs:occlusion"]
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1331.4381, -869.53784)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 1230
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_vector3"
            float3 inputs:default
            asset inputs:file = @noiseTexture.png@
            string inputs:filtertype
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize = (0.2, 0.2)
            float2 inputs:texcoord
            float2 inputs:uvoffset.connect = </Root/AudioColorMaterial/Convert.outputs:out>
            float2 inputs:uvtiling
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-792.71014, -828.1478)
            float2 ui:nodegraph:node:size = (158.5, 235)
            int ui:nodegraph:node:stackingOrder = 1377
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:uvtiling", "inputs:uvtiling", "inputs:filtertype", "inputs:uvtiling"]
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_vector3"
            bool inputs:doclamp = 0
            float3 inputs:gamma
            float3 inputs:in.connect = </Root/AudioColorMaterial/TiledImage.outputs:out>
            float3 inputs:inhigh
            float3 inputs:inlow
            float3 inputs:outhigh = (0, 0.35, 0)
            float3 inputs:outlow
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-442.39062, -761.2539)
            float2 ui:nodegraph:node:size = (98, 217)
            int ui:nodegraph:node:stackingOrder = 1390
        }

        def Shader "HSVToRGB"
        {
            uniform token info:id = "ND_hsvtorgb_color3"
            color3f inputs:in.connect = </Root/AudioColorMaterial/Combine3.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-94.453125, -1014.96484)
            float2 ui:nodegraph:node:size = (155, 53)
            int ui:nodegraph:node:stackingOrder = 1341
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_color3"
            float inputs:in1.connect = </Root/AudioColorMaterial/Multiply.outputs:out>
            float inputs:in2 = 1
            float inputs:in3 = 0.6
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-306.27344, -1017.8633)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 1365
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/AudioColorMaterial/Separate3.outputs:outx>
            float inputs:in2 = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-422.3638, -1067.0254)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1396
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in1"]
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/AudioColorMaterial/Fractal3D.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-564.3594, -1075.0586)
            float2 ui:nodegraph:node:size = (115.5, 145)
            int ui:nodegraph:node:stackingOrder = 1324
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/AudioColorMaterial.inputs:speed>
            float inputs:in2.connect = </Root/AudioColorMaterial/Time.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1146.5898, -985.3008)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1423
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_float_vector2"
            float inputs:in.connect = </Root/AudioColorMaterial/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1023, -961.52734)
            float2 ui:nodegraph:node:size = (135.5, 40)
            int ui:nodegraph:node:stackingOrder = 1321
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/AudioColorMaterial/Time.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1115.6719, -1097.5273)
            float2 ui:nodegraph:node:size = (116, 40)
            int ui:nodegraph:node:stackingOrder = 1404
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Range_1"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma = 0.5
            float inputs:in.connect = </Root/AudioColorMaterial/Sin.outputs:out>
            float inputs:inhigh
            float inputs:inlow
            float inputs:outhigh = 0.7
            float inputs:outlow = 0.2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-941.7539, -1107.0273)
            float2 ui:nodegraph:node:size = (103.5, 217)
            int ui:nodegraph:node:stackingOrder = 1400
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def Shader "Fractal3D"
        {
            uniform token info:id = "ND_fractal3d_vector3"
            float3 inputs:amplitude.connect = </Root/AudioColorMaterial/Combine3_1.outputs:out>
            prepend float inputs:diminish.connect = </Root/AudioColorMaterial/Range_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-749.58203, -1181.4727)
            float2 ui:nodegraph:node:size = (130.5, 181)
            int ui:nodegraph:node:stackingOrder = 1408
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:position"]
        }

        def Shader "Combine3_1"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in1.connect = </Root/AudioColorMaterial/Range_2.outputs:out>
            float inputs:in2
            float inputs:in3
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1016.4414, -1255.7617)
            float2 ui:nodegraph:node:size = (157, 54)
            int ui:nodegraph:node:stackingOrder = 1399
        }

        def Shader "Range_2"
        {
            uniform token info:id = "ND_range_float"
            bool inputs:doclamp
            float inputs:gamma
            float inputs:in.connect = </Root/AudioColorMaterial/Sin_1.outputs:out>
            float inputs:inhigh
            float inputs:inlow
            float inputs:outhigh = 0.6
            float inputs:outlow = 0.2
            float inputs:outlow.connect = None
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1317.0547, -1237.8359)
            float2 ui:nodegraph:node:size = (107, 217)
            int ui:nodegraph:node:stackingOrder = 1433
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/AudioColorMaterial/Time.outputs:out>
            float inputs:in2 = 0.3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1643.46, -1177.6222)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1432
        }

        def Shader "Sin_1"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/AudioColorMaterial/Multiply_2.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1575.0359, -1232.0072)
            float2 ui:nodegraph:node:size = (118, 53)
            int ui:nodegraph:node:stackingOrder = 1434
        }
    }

    def Cube "CustomMaterialCube" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/AudioColorMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/CustomMaterialCube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "HierarchicalFade"
        {
            uniform token info:id = "RealityKit.HierarchicalFade"
            float opacity = 0
        }
    }
}

